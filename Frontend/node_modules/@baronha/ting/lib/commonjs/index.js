"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  toast: true,
  alert: true,
  dismissAlert: true,
  setup: true
};
exports.alert = alert;
exports.dismissAlert = dismissAlert;
exports.setup = setup;
exports.toast = toast;
var _reactNative = require("react-native");
var _Type = require("./Type");
Object.keys(_Type).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _Type[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _Type[key];
    }
  });
});
const LINKING_ERROR = `The package 'ting' doesn't seem to be linked. Make sure: \n\n` + _reactNative.Platform.select({
  ios: "- You have run 'pod install'\n",
  default: ''
}) + '- You rebuilt the app after installing the package\n';

// @ts-expect-error
const isTurboModuleEnabled = global.__turboModuleProxy != null;
const TingModule = isTurboModuleEnabled ? require('./NativeTing').default : _reactNative.NativeModules.Ting;
const Ting = TingModule ? TingModule : new Proxy({}, {
  get() {
    throw new Error(LINKING_ERROR);
  }
});
const convertIconFile = options => {
  var _options$icon;
  const iconURI = options === null || options === void 0 ? void 0 : (_options$icon = options.icon) === null || _options$icon === void 0 ? void 0 : _options$icon.uri;
  if (options !== null && options !== void 0 && options.icon) {
    if (typeof iconURI === 'number') {
      options.icon.uri = _reactNative.Image.resolveAssetSource(iconURI).uri;
    }
  }
};
function toast(options) {
  convertIconFile(options);
  Ting.toast(options);
}
function alert(options) {
  convertIconFile(options);
  Ting.alert(options);
}
function dismissAlert() {
  Ting.dismissAlert();
}
function setup(options) {
  convertIconFile(options === null || options === void 0 ? void 0 : options.alert);
  convertIconFile(options === null || options === void 0 ? void 0 : options.toast);
  return Ting.setup(options);
}
//# sourceMappingURL=index.js.map